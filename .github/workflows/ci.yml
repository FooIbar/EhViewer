name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Rust Toolchain
        run: rustup update && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android && rustup component add rustfmt clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./app/src/main/rust"
          shared-key: ${{ runner.os }}

      - name: Rustfmt Check
        working-directory: ./app/src/main/rust
        run: cargo fmt --all -- --check

      - name: Clippy Check
        working-directory: ./app/src/main/rust
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: true

      - name: Spotless Check
        run: ./gradlew spotlessCheck

  oss:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Rust Toolchain
        run: rustup update && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android && rustup component add rustfmt clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./app/src/main/rust"
          shared-key: ${{ runner.os }}
          save-if: "false"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GradleEncryptionKey }}
          gradle-home-cache-cleanup: true

      - name: CMake Cache
        uses: actions/cache@v4
        with:
          path: app/.cxx
          key: cmake-default-${{ hashFiles('gradle/libs.versions.toml', 'app/build.gradle.kts', 'app/src/main/cpp/CMakeLists.txt') }}
          restore-keys: cmake-default-

      - name: Install Build Tools
        run: echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;35.0.0-rc1"

      - name: Build OSS
        run: ./gradlew assembleDefaultOssRelease

      - name: Upload OSS ARM64
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-arm64-v8a-${{ github.sha }}
          path: app/build/outputs/apk/defaultOss/release/app-default-oss-arm64-v8a-release.apk

      - name: Upload OSS x86_64
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-x86_64-${{ github.sha }}
          path: app/build/outputs/apk/defaultOss/release/app-default-oss-x86_64-release.apk

      - name: Upload OSS ARM32
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-armeabi-v7a-${{ github.sha }}
          path: app/build/outputs/apk/defaultOss/release/app-default-oss-armeabi-v7a-release.apk

      - name: Upload OSS x86
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-x86-${{ github.sha }}
          path: app/build/outputs/apk/defaultOss/release/app-default-oss-x86-release.apk

      - name: Upload OSS mapping
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-mapping-${{ github.sha }}
          path: app/build/outputs/mapping/defaultOssRelease/mapping.txt

      - name: Upload OSS native debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: default-oss-native-debug-symbols-${{ github.sha }}
          path: app/build/outputs/native-debug-symbols/defaultOssRelease/native-debug-symbols.zip

  gms:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Rust Toolchain
        run: rustup update && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android && rustup component add rustfmt clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./app/src/main/rust"
          shared-key: ${{ runner.os }}
          save-if: "false"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GradleEncryptionKey }}
          gradle-home-cache-cleanup: true

      - name: CMake Cache
        uses: actions/cache/restore@v4
        with:
          path: app/.cxx
          key: cmake-default-${{ hashFiles('gradle/libs.versions.toml', 'app/build.gradle.kts', 'app/src/main/cpp/CMakeLists.txt') }}
          restore-keys: cmake-default-

      - name: Install Build Tools
        run: echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;35.0.0-rc1"

      - name: Build GMS
        run: ./gradlew assembleDefaultGmsRelease

      - name: Upload GMS ARM64
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-arm64-v8a-${{ github.sha }}
          path: app/build/outputs/apk/defaultGms/release/app-default-gms-arm64-v8a-release.apk

      - name: Upload GMS x86_64
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-x86_64-${{ github.sha }}
          path: app/build/outputs/apk/defaultGms/release/app-default-gms-x86_64-release.apk

      - name: Upload GMS ARM32
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-armeabi-v7a-${{ github.sha }}
          path: app/build/outputs/apk/defaultGms/release/app-default-gms-armeabi-v7a-release.apk

      - name: Upload GMS x86
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-x86-${{ github.sha }}
          path: app/build/outputs/apk/defaultGms/release/app-default-gms-x86-release.apk

      - name: Upload GMS mapping
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-mapping-${{ github.sha }}
          path: app/build/outputs/mapping/defaultGmsRelease/mapping.txt

      - name: Upload GMS native debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: default-gms-native-debug-symbols-${{ github.sha }}
          path: app/build/outputs/native-debug-symbols/defaultGmsRelease/native-debug-symbols.zip

  marshmallow-oss:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Rust Toolchain
        run: rustup update && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android && rustup component add rustfmt clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./app/src/main/rust"
          shared-key: ${{ runner.os }}
          save-if: "false"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GradleEncryptionKey }}
          gradle-home-cache-cleanup: true

      - name: CMake Cache
        uses: actions/cache@v4
        with:
          path: app/.cxx
          key: cmake-marshmallow-${{ hashFiles('gradle/libs.versions.toml', 'app/build.gradle.kts', 'app/src/main/cpp/CMakeLists.txt') }}
          restore-keys: cmake-marshmallow-

      - name: Install Build Tools
        run: echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;35.0.0-rc1"

      - name: Build Marshmallow OSS
        run: ./gradlew assembleMarshmallowOssRelease

      - name: Upload Marshmallow OSS ARM64
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-arm64-v8a-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowOss/release/app-marshmallow-oss-arm64-v8a-release.apk

      - name: Upload Marshmallow OSS x86_64
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-x86_64-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowOss/release/app-marshmallow-oss-x86_64-release.apk

      - name: Upload Marshmallow OSS ARM32
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-armeabi-v7a-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowOss/release/app-marshmallow-oss-armeabi-v7a-release.apk

      - name: Upload Marshmallow OSS x86
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-x86-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowOss/release/app-marshmallow-oss-x86-release.apk

      - name: Upload Marshmallow OSS mapping
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-mapping-${{ github.sha }}
          path: app/build/outputs/mapping/marshmallowOssRelease/mapping.txt

      - name: Upload Marshmallow OSS native debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-oss-native-debug-symbols-${{ github.sha }}
          path: app/build/outputs/native-debug-symbols/marshmallowOssRelease/native-debug-symbols.zip

  marshmallow-gms:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install Rust Toolchain
        run: rustup update && rustup target add armv7-linux-androideabi aarch64-linux-android i686-linux-android x86_64-linux-android && rustup component add rustfmt clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./app/src/main/rust"
          shared-key: ${{ runner.os }}
          save-if: "false"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-encryption-key: ${{ secrets.GradleEncryptionKey }}
          gradle-home-cache-cleanup: true

      - name: CMake Cache
        uses: actions/cache/restore@v4
        with:
          path: app/.cxx
          key: cmake-marshmallow-${{ hashFiles('gradle/libs.versions.toml', 'app/build.gradle.kts', 'app/src/main/cpp/CMakeLists.txt') }}
          restore-keys: cmake-marshmallow-

      - name: Install Build Tools
        run: echo "y" | ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "build-tools;35.0.0-rc1"

      - name: Build Marshmallow GMS
        run: ./gradlew assembleMarshmallowGmsRelease

      - name: Upload Marshmallow GMS ARM64
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-arm64-v8a-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowGms/release/app-marshmallow-gms-arm64-v8a-release.apk

      - name: Upload Marshmallow GMS x86_64
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-x86_64-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowGms/release/app-marshmallow-gms-x86_64-release.apk

      - name: Upload Marshmallow GMS ARM32
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-armeabi-v7a-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowGms/release/app-marshmallow-gms-armeabi-v7a-release.apk

      - name: Upload Marshmallow GMS x86
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-x86-${{ github.sha }}
          path: app/build/outputs/apk/marshmallowGms/release/app-marshmallow-gms-x86-release.apk

      - name: Upload Marshmallow GMS mapping
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-mapping-${{ github.sha }}
          path: app/build/outputs/mapping/marshmallowGmsRelease/mapping.txt

      - name: Upload Marshmallow GMS native debug symbols
        uses: actions/upload-artifact@v4
        with:
          name: marshmallow-gms-native-debug-symbols-${{ github.sha }}
          path: app/build/outputs/native-debug-symbols/marshmallowGmsRelease/native-debug-symbols.zip
